name: Build and Deploy Test

on:  
  pull_request:
    branches:
    - main
# on:
#   push:
#     tags:
#     - '*'

# Environment variables available to all jobs and steps in this workflow
env:
  APP_URL: http://a676941b1afa24b548bee494aa63cee0-1812614096.us-west-2.elb.amazonaws.com
  IMAGE_PULL_SECRET: spectro-image-pull-secret
  K8S_NAMESPACE: default
#   CLUSTER_NAME: {cluster-name}
#   CLUSTER_RESOURCE_GROUP: {resource-group-name}
#   NAMESPACE: {namespace-name}
#   SECRET: {secret-name}
#   APP_NAME: {app-name}

jobs:
  # k8sdeploy:
  #   name: Deploy K8s cluster
  #   runs-on: ubuntu-latest
  #   # outputs:
  #   #   cluster_uid: ${{ steps.get_tag_name.outputs.GIT_TAG_NAME }}
  #   steps:
  #   - uses: spectrocloud/k8s-deploy-cluster@v1
  #     with:
  #       host: ${{ secrets.SC_HOST }}
  #       username: ${{ secrets.SC_USERNAME }}
  #       password: ${{ secrets.SC_PASSWORD }}
  #       deletePostJob: false
  #       clusterNamePrefix: cicd
  #       clusterTemplate: |
  #         cloudType: aws
  #         projectName: Default
  #         clusterProfileName: ProdAWS
  #         cloudAccountName: aws-1
  #         labels:
  #           cicd: spectro__tag
  #         cloudConfig:
  #           region: us-west-2
  #           sshKeyName: default
  #         machinePools:
  #         - controlPlane: true
  #           controlPlaneAsWorker: true
  #           name: master-pool
  #           count: 1
  #           config:
  #             instanceType: t3.large
  #             rootDeviceSize: 62
  #             azs: ["us-west-2a"]
  #         # - name: worker-pool1
  #         #   count: 1
  #         #   config:
  #         #     instanceType: t3.large
  #         #     rootDeviceSize: 65
  #         #     azs: ["us-west-2a"]
  #     id: deploycluster
  build:
    name: Build
    runs-on: self-hosted #ubuntu-latest
    outputs:
      git_tag_name: ${{ steps.get_tag_name.outputs.GIT_TAG_NAME }}
    steps:
    - uses: actions/checkout@main
    - name: Get the version
      id: get_tag_name
      run: echo ::set-output name=GIT_TAG_NAME::${{ github.sha }}
    # - name: Print env
    #   run: env
    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCLOUD_JSON_KEY }}
    - name: Build Image
      run: >
        docker build --tag
        gcr.io/spectro-common-dev/saamalik/hipster/frontend:${{steps.get_tag_name.outputs.GIT_TAG_NAME}}
        .
    - name: Push image
      run: >
        docker push
        gcr.io/spectro-common-dev/saamalik/hipster/frontend:${{steps.get_tag_name.outputs.GIT_TAG_NAME}}
    # The following works, but isn't necessary; especially with self-hosted runners which cache all the outputs
    #- uses: whoan/docker-build-with-cache-action@v5
    #  with:
    #    username: _json_key
    #    password: ${{ secrets.GCLOUD_JSON_KEY }}
    #    registry: gcr.io
    #    image_name: spectro-common-dev/saamalik/hipster/frontend
    #    image_tag: ${{ steps.get_tag_name.outputs.GIT_TAG_NAME}}
    #    #build_extra_args: --build-arg=http_proxy=${{ env.http_proxy }} --build-arg=https_proxy=${{ env.https_proxy }}
    #    ## http_proxy/https_proxy should be specified in the runner .env; see comment in the env section above.
  deploy:
    name: Deploy to Dev Env
    runs-on: self-hosted #ubuntu-latest
    needs: build
    environment:
      name: dev
      url: ${{ env.APP_URL }}
    steps:
    - uses: actions/checkout@main
    - uses: spectrocloud/k8s-set-context@v1
      with:
        host: ${{ secrets.SC_HOST }}
        username: ${{ secrets.SC_USERNAME }}
        password: ${{ secrets.SC_PASSWORD }}
        projectName: Default
        clusterTags: |
          cicd: hipster
          dev: spectro__tag
      id: setcontext
    # - name: Print env
    #   run: env
    - uses: azure/k8s-deploy@v1.4
      with:
        manifests: |
          manifests/deployment.yaml
          manifests/service.yaml
        images: |
          gcr.io/spectro-common-dev/saamalik/hipster/frontend:${{ needs.build.outputs.git_tag_name }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.K8S_NAMESPACE }}
